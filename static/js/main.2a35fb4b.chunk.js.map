{"version":3,"sources":["data/posts.js","Components/Header.js","Pages/Home.js","Pages/Contacts.js","Components/Post.js","Components/Posts.js","Pages/Blog.js","App.js","index.js"],"names":["module","exports","posts","title","littleText","text","Header","className","to","process","Component","Home","Contacts","Post","props","state","visible","handleClick","bind","this","setState","data","style","visibility","href","onClick","height","transition","dangerouslySetInnerHTML","__html","Posts","postsTemplate","map","item","index","Blog","App","path","match","location","component","exact","withRouter","replace","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a35fb4b.chunk.js","sourcesContent":["module.exports= {\n  posts:[\n    {\n      title:'2 статья, пишем первый тест',\n      littleText:\"написание теста для react, с помощью jest и react-test-renderer\",\n      text:\"<p>Добавим первый тест для компонента Post создадим в папке <code>/Componeents</code> папку <code>test</code>, а в ней файл <code>Post.test.js</code> нужно будет установить зависимость <code>react-test-renderer</code>  и за импортить ее в файл вместе c реактом и самим компонентом Post<br>Создадим сам тест получилось вот так </p>\\n\" +\n        \"<pre><code><span class=\\\"hljs-keyword\\\">import</span> React <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'react'</span>;\\n\" +\n        \"<span class=\\\"hljs-keyword\\\">import</span> renderer <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">'react-test-renderer'</span>;\\n\" +\n        \"<span class=\\\"hljs-keyword\\\">import</span> Post <span class=\\\"hljs-keyword\\\">from</span> <span class=\\\"hljs-string\\\">\\\"../Post\\\"</span>;\\n\" +\n        \"\\n\" +\n        \"describe(<span class=\\\"hljs-string\\\">'post tests'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n\" +\n        \"  it(<span class=\\\"hljs-string\\\">'first tests'</span>, <span class=\\\"hljs-function\\\"><span class=\\\"hljs-params\\\">()</span> =&gt;</span> {\\n\" +\n        \"    expect(<span class=\\\"hljs-literal\\\">true</span>).toEqual(<span class=\\\"hljs-literal\\\">true</span>)\\n\" +\n        \"  })\\n\" +\n        \"})\\n\" +\n        \"</code></pre><p>выполняю в консоли yarn jest <code>Test Suites: 1 passed, 1 total</code><br>хорошо, теперь надо сделать этот тест полезным, если возьмем документацию для <code>react-test-renderer</code> <a href=\\\"https://reactjs.org/docs/test-renderer.html\\\">https://reactjs.org/docs/test-renderer.html</a><br> то у нас получится вот такой тест </p>\\n\" +\n        \"<pre><code>const post = renderer\\n\" +\n        \"  .create(&lt;Post data={{<span class=\\\"hljs-string\\\">title:</span><span class=\\\"hljs-string\\\">'title'</span>,<span class=\\\"hljs-string\\\">littleText:</span><span class=\\\"hljs-string\\\">'little text'</span>, <span class=\\\"hljs-string\\\">text:</span><span class=\\\"hljs-string\\\">'big text'</span>}}/&gt;)\\n\" +\n        \"  .toJSON();\\n\" +\n        \"expect(post).toMatchSnapshot();\\n\" +\n        \"</code></pre><p>компонент Post принимает в себя объект поста вида </p>\\n\" +\n        \"<pre><code>{\\n\" +\n        \"   <span class=\\\"hljs-attribute\\\">title</span>:<span class=\\\"hljs-string\\\">'second posts'</span>,\\n\" +\n        \"   littleText: <span class=\\\"hljs-string\\\">\\\"preview tex\\\"</span>,\\n\" +\n        \"   text:<span class=\\\"hljs-string\\\">\\\"big text\\\"</span>\\n\" +\n        \"}\\n\" +\n        \"</code></pre><p>и отрисовывает его. Так как мы используем <code>toMatchSnapshot()</code> то сначала нам необходимо сделать снапшот с которым мы будем сравнивать, то что отрисовывает нам компонентзапустим команду в консоли <code>yarn jest -u</code> -u это сокращение для   --updateSnapshot<br>jest нам сделал снапшот можем его посмотреть </p>\\n\" +\n        \"<pre><code>\\n\" +\n        \"exports[`post tests first tests <span class=\\\"hljs-number\\\">1</span>`] = `\\n\" +\n        \"&lt;div\\n\" +\n        \"  <span class=\\\"hljs-built_in\\\">className</span>=<span class=\\\"hljs-string\\\">\\\"post\\\"</span>\\n\" +\n        \"&gt;\\n\" +\n        \"  &lt;p\\n\" +\n        \"    <span class=\\\"hljs-built_in\\\">className</span>=<span class=\\\"hljs-string\\\">\\\"title\\\"</span>\\n\" +\n        \"  &gt;\\n\" +\n        \"    title\\n\" +\n        \"  &lt;/p&gt;\\n\" +\n        \"  &lt;p\\n\" +\n        \"    <span class=\\\"hljs-built_in\\\">className</span>=<span class=\\\"hljs-string\\\">\\\"preview\\\"</span>\\n\" +\n        \"  &gt;\\n\" +\n        \"    little <span class=\\\"hljs-built_in\\\">text</span>\\n\" +\n        \"  &lt;/p&gt;\\n\" +\n        \"  &lt;button\\n\" +\n        \"    <span class=\\\"hljs-built_in\\\">className</span>=<span class=\\\"hljs-string\\\">\\\"post_readMore\\\"</span>\\n\" +\n        \"    href=<span class=\\\"hljs-string\\\">\\\"#\\\"</span>\\n\" +\n        \"    onClick={[Function]}\\n\" +\n        \"    style={\\n\" +\n        \"      Object {\\n\" +\n        \"        <span class=\\\"hljs-string\\\">\\\"visibility\\\"</span>: <span class=\\\"hljs-string\\\">\\\"visible\\\"</span>,\\n\" +\n        \"      }\\n\" +\n        \"    }\\n\" +\n        \"  &gt;\\n\" +\n        \"    Читать\\n\" +\n        \"  &lt;/button&gt;\\n\" +\n        \"  &lt;p\\n\" +\n        \"    <span class=\\\"hljs-built_in\\\">className</span>=<span class=\\\"hljs-string\\\">\\\"body\\\"</span>\\n\" +\n        \"    style={\\n\" +\n        \"      Object {\\n\" +\n        \"        <span class=\\\"hljs-string\\\">\\\"height\\\"</span>: <span class=\\\"hljs-number\\\">0</span>,\\n\" +\n        \"        <span class=\\\"hljs-string\\\">\\\"transition\\\"</span>: <span class=\\\"hljs-string\\\">\\\"height 2s ease\\\"</span>,\\n\" +\n        \"        <span class=\\\"hljs-string\\\">\\\"visibility\\\"</span>: <span class=\\\"hljs-string\\\">\\\"hidden\\\"</span>,\\n\" +\n        \"      }\\n\" +\n        \"    }\\n\" +\n        \"  &gt;\\n\" +\n        \"    big <span class=\\\"hljs-built_in\\\">text</span>\\n\" +\n        \"  &lt;/p&gt;\\n\" +\n        \"&lt;/div&gt;\\n\" +\n        \"`;\\n\" +\n        \"</code></pre>\"\n    },{\n      title:' 4 статья, авто деплой на gh pages',\n      littleText: \"настраиваем автодеплой на gh pages с помощью git hub actions\",\n      text:\"<p>Давайте попробуем задеплоить наше(мое) приложение на gh pages\\n\" +\n        \"<br>\\n\" +\n        \"gh(git hub pages) это бесплатный хостинг для статических файлов, \\n\" +\n        \"ну будем его не просто деплоить, а сразу настроим авто деплой с помощью github actions\\n\" +\n        \"у нас уже есть директория в корне проекта для пайплайнов <code>.github/workflows</code>\\n\" +\n        \"Создадим в ней файл <code>publish.yaml</code> тут будет лежать наш пайплайн написанный на yaml, сразу предупреждаю(почти сразу) мы\\n\" +\n        \"не будем делать велосипед, а возьмем готовое решение, я использую google и ищу готовое решение\\n\" +\n        \"<br></p>\\n\" +\n        \"<pre><code>...\\n\" +\n        \"</code></pre><p><br>\\n\" +\n        \" вот оно <code>https://github.com/marketplace/actions/deploy-to-github-pages</code>  я использовал его, но я, когда пишу статью нашел еще один экшен, и в нем на 300 звезд больше 1.2 vs 1.5\\n\" +\n        \" вот это <code>https://github.com/marketplace/actions/github-pages-action</code> но я уже буду писать про первое решение, которое сам использовал, а вообще когда нибудь в следующий раз посмотрим, что там у него под капотом\\n\" +\n        \" <br>\\n\" +\n        \" в общем у меня получился вот такой пайплайн,</p>\\n\" +\n        \"<pre><code><span class=\\\"hljs-string\\\">name:</span> build -&gt; deploy        <span class=\\\"hljs-comment\\\">// имя джобы</span>\\n\" +\n        \"<span class=\\\"hljs-string\\\">on:</span>                          <span class=\\\"hljs-comment\\\">// при каком действии</span>\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">  push:</span>                      <span class=\\\"hljs-comment\\\">// на пуш</span>\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">    branches:</span> [ master ]     <span class=\\\"hljs-comment\\\">// в ветку мастер -&gt; итог 4 строчек при пуше в мастер запустится эта джоба</span>\\n\" +\n        \"<span class=\\\"hljs-string\\\">jobs:</span>\\n\" +\n        \"  deploy-<span class=\\\"hljs-string\\\">job:</span>\\n\" +\n        \"    runs-<span class=\\\"hljs-string\\\">on:</span> ubuntu-latest   <span class=\\\"hljs-comment\\\">// на какой машине будет запуск</span>\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">    steps:</span>                   <span class=\\\"hljs-comment\\\">// шаги ниже </span>\\n\" +\n        \"      - <span class=\\\"hljs-string\\\">name:</span> Checkout       \\n\" +\n        \"<span class=\\\"hljs-symbol\\\">        uses:</span> actions<span class=\\\"hljs-regexp\\\">/checkout@v2.3.1 /</span>/ использоование уже готового экшена этот деалет pull репника на машину runs-<span class=\\\"hljs-string\\\">on:</span> ubuntu-latest\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">        with:</span>\\n\" +\n        \"          persist-<span class=\\\"hljs-string\\\">credentials:</span> <span class=\\\"hljs-literal\\\">false</span> <span class=\\\"hljs-comment\\\">// эта штука говорит нам что  # Whether to configure the token or SSH key with the local git config</span>\\n\" +\n        \"            <span class=\\\"hljs-comment\\\">// и по умолчанию она true нам не надо, так что ставим false</span>\\n\" +\n        \"\\n\" +\n        \"          node-<span class=\\\"hljs-string\\\">version:</span> <span class=\\\"hljs-string\\\">'14.x'</span> <span class=\\\"hljs-comment\\\">// версия ноды которую будем устанавливать</span>\\n\" +\n        \"\\n\" +\n        \"      - <span class=\\\"hljs-string\\\">name:</span> <span class=\\\"hljs-string\\\">'install'</span> \\n\" +\n        \"<span class=\\\"hljs-symbol\\\">        run:</span> npm i <span class=\\\"hljs-comment\\\">// теперь можно установить зависимости</span>\\n\" +\n        \"\\n\" +\n        \"      - <span class=\\\"hljs-string\\\">name:</span> Build\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">        run:</span> npm run build <span class=\\\"hljs-comment\\\">// собираем </span>\\n\" +\n        \"\\n\" +\n        \"      - <span class=\\\"hljs-string\\\">name:</span> Deploy\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">        uses:</span> JamesIves<span class=\\\"hljs-regexp\\\">/github-pages-deploy-action@3.7.1 /</span>/ собственно сам экшен для деплоя, грубо говоря после того как мы сдеали билд проекта\\n\" +\n        \"<span class=\\\"hljs-comment\\\">// он запушит статику которую мы сбилдлили в ветку BRANCH у нас это gh pages</span>\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">        with:</span>\\n\" +\n        // eslint-disable-next-line\n        \"<span class=\\\"hljs-symbol\\\">          GITHUB_TOKEN:</span> ${{ secrets.GITHUB_TOKEN }} <span class=\\\"hljs-comment\\\">// это надо указывать именно так,  гитхаб сам сходит и заберет ваш токен</span>\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">          BRANCH:</span> gh-pages <span class=\\\"hljs-comment\\\">// ветка </span>\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">          FOLDER:</span> build\\n\" +\n        \"<span class=\\\"hljs-symbol\\\">          CLEAN:</span> <span class=\\\"hljs-literal\\\">true</span> <span class=\\\"hljs-comment\\\">// удаляем файлы из ветки выше</span>\\n\" +\n        \"</code></pre><p>собственно я все описал в комментах выше можем сделать пуш в мастер и задеплоить наш проект, автоматически \\n\" +\n        \"<code>тут будет картинка моего успешного экшена</code>\\n\" +\n        \"осталось сделать самое важное \\n\" +\n        \"<br>\\n\" +\n        \"Идем в репозиторий -&gt; Settings-&gt; Options ищем GitHub Pages  и там выбираем наш бранч BRANCH у меня gh-pages\\n\" +\n        \"теперь gh pages будет брать статику из этой ветке и отображать ее нам, в ИНТЕРНЕТЕ.\\n\" +\n        \"В следующией статье посомтрим почему все равно ничего не заработало, всем пока !\\n\" +\n        \"))</p>\\n\"\n    },{\n      title:'Что это такое, и какую информацию тут можно найти //в статье про это ничего нет :( ',\n      littleText: \"что мы тут делаем\",\n      text:\"<p>##О чем этот блог?\\n\" +\n        \"В этом блоге я буду пытаться писать код этого блога.<br>В то же время я буду стараться делать акцент на написание тестов для этого кода. И в то же время я буду писать об этом статьи, собственно это и есть цель блога.<br>К сожалению, я не обладаю писательскими талантами так, что по большей мере все это делается для меня лично. Но если вы тоже найдете, что-то для себя во всем этом, я буду очень рад. \\n\" +\n        \"<br><br>Пишите свои замечания и комментарии мне сразу в телеграм <code>@alexandrpenkov</code><br>Код вот тут <a href=\\\"https://github.com/apenkov/test_blog\\\">https://github.com/apenkov/test_blog</a> </p>\\n\"\n    },{\n      title:'3 статья, пишем ci на github actions для нашего теста',\n      littleText: \"превью\",\n      text:\"сама статья стало быть\"\n    },{\n      title:'тут что отвлеченное, хотел затонуть тему девопс, про докер и консулы всякие',\n      littleText: \"тоже самое что в названии\",\n      text:\"тут текст\"\n    },\n\n  ]\n}\n","import React, {Component} from 'react';\nimport { Link } from \"react-router-dom\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <>\n          <div className={'header'}>\n            <div className={'innerHeader'}>\n              <div className={'logoContainer'}>\n                <h1>MY<span>BLOG</span></h1>\n              </div>\n              <ul className={'navigation'}>\n                <Link to={process.env.PUBLIC_URL + '/'}><li>Home</li></Link>\n                <Link to={process.env.PUBLIC_URL +'/blog'}><li>Blog</li></Link>\n                <Link to={process.env.PUBLIC_URL +'/contacts'}><li>Contacts</li></Link>\n              </ul>\n            </div>\n          </div>\n\n        </>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Home extends  Component {\n  render() {\n    return (\n      <div className={'home'}>\n        Homepage go to  -> Blog\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Contacts extends  Component {\n  render() {\n    return (\n      <div className={'contacts'}>\n        telegram @alexandrpenkov\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react';\n\nexport default class Post extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    this.setState(state => ({\n      visible: !this.state.visible\n    }))\n  }\n\n  render() {\n    const data = this.props.data;\n    return (\n      <div className=\"post\">\n        <p className=\"title\">{data.title}</p>\n        <p className=\"preview\" style={{visibility: this.state.visible ? 'hidden' : 'visible'}}>{data.littleText}</p>\n        <button href=\"#\" className={`post_readMore`} onClick={this.handleClick}\n                style={{visibility: this.state.visible ? 'hidden' : 'visible'}}>Читать\n        </button>\n        <p className={`body`} style={{\n          visibility: this.state.visible ? 'visible' : 'hidden',\n          height: this.state.visible ? 'auto' : 0,\n          transition: 'height 2s ease'\n        }}\n        dangerouslySetInnerHTML={{__html:data.text}}></p>\n        <button href=\"#\" className={`post_readLess`} onClick={this.handleClick}\n                style={{visibility: this.state.visible ? 'visible' : 'hidden'}}>Скрыть\n        </button>\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react';\nimport Post from \"./Post\";\n\nexport default class Posts extends Component {\n  render() {\n    const data = this.props.data;\n    const postsTemplate = data.map((item, index)=>{\n      return (\n        <div key={index}>\n         <Post data ={item}/>\n        </div>\n      )\n    })\n    return(\n      <div>\n        {postsTemplate}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport Posts from \"../Components/Posts\";\nimport { posts } from  \"../data/posts\";\n\nexport default class Blog extends  Component {\n  render() {\n    return (\n      <div className={'posts'}>\n        <Posts data={posts}/>\n      </div>\n    )\n  }\n}\n","import './App.css';\nimport React from \"react\";\nimport Header from \"./Components/Header\";\nimport {Route, Switch, withRouter} from \"react-router-dom\";\nimport Home from \"./Pages/Home\";\nimport Contacts from \"./Pages/Contacts\";\nimport Blog from \"./Pages/Blog\";\n\nfunction App(props) {\n  const { path } = props.match;\n  return (\n    <div>\n      <Header/>\n      <Switch location={props.location}>\n        <Route  path={path +\"/contacts\"} component={Contacts}/>\n        <Route  path={path +\"/blog\"} component={Blog}/>\n        <Route exact path={path} component={Home}/>\n      </Switch>\n    </div>\n  );\n}\n\nconst AppRouter = ({ match }) => {\n  return (\n    <Switch>\n      <Route  path={match.path + `${process.env.PUBLIC_URL.replace('/','')}`} component={App}/>\n    </Switch>\n  );\n}\n\nexport default withRouter(AppRouter);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}